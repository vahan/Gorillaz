// Generated by CoffeeScript 1.6.2
(function() {
  var LOCATION, MAX_ROUNDS, MAX_STAGES, NEXT_ROUND, NEXT_STAGE, ROUND, STAGE, UPDATE_INTERVAL, WIND;

  LOCATION = 'http://localhost:8070/';

  window.Connector = (function() {
    function Connector(game) {
      this.game = game;
      console.log("connector is ready");
    }

    Connector.prototype.submitAuthentication = function() {
      var _this = this;
      console.log("authentication submitted");
      $.ajax(LOCATION, {
        type: "POST",
        dataType: 'html',
        async: false,
        data: {
          request: 'authenticate',
          round: this.game.getRound(),
          stage: this.game.getStage()
        },
        error: function(jqXHR, textStatus, errorThrown) {
          return _this.error(errorThrown);
        },
        success: function(data, textStatus, jqXHR) {
          var id, splitted, wind;
          console.log("feedback: " + data);
          splitted = data.split(":");
          id = +splitted[0];
          if (id >= 0) {
            _this.game.setId(id);
          } else {
            _this.error("illegal id was returned while trying to authenticate: " + id);
          }
          wind = +splitted[1];
          return _this.game.setWind(wind);
        }
      });
      console.log("Authenticated as: " + this.game.getId());
      return this.game.getId();
    };

    Connector.prototype.submitAngle = function(angle) {
      var _this = this;
      console.log("submitting angle for game id: " + this.game.getId());
      this.resp = null;
      $.ajax(LOCATION, {
        type: "POST",
        dataType: 'html',
        async: false,
        data: {
          request: 'angle',
          round: this.game.getRound(),
          stage: this.game.getStage(),
          id: this.game.getId(),
          angle: angle
        },
        error: function(jqXHR, textStatus, errorThrown) {
          return _this.error(errorThrown);
        },
        success: function(data, textStatus, jqXHR) {
          _this.resp = data;
        }
      });
      console.log("submitted: " + angle + "\t response: " + this.resp);
      return this.resp;
    };

    Connector.prototype.requestMean = function() {
      var _this = this;
      console.log("requesting mean for game id: " + this.game.getId());
      this.mean = [];
      $.ajax(LOCATION, {
        type: "POST",
        dataType: 'html',
        async: false,
        data: {
          request: 'mean',
          round: this.game.getPreviousRound(),
          stage: this.game.getStage(),
          id: this.game.getId()
        },
        error: function(jqXHR, textStatus, errorThrown) {
          return _this.error(errorThrown);
        },
        success: function(data, textStatus, jqXHR) {
          _this.mean = data.split(' ');
          return console.log("mean angles: " + _this.mean);
        }
      });
      return this.mean;
    };

    Connector.prototype.requestNext = function() {
      var next,
        _this = this;
      console.log("Requesting for next");
      next = 0;
      $.ajax(LOCATION, {
        type: "POST",
        dataType: 'html',
        async: false,
        data: {
          request: 'next',
          round: this.game.getRound(),
          stage: this.game.getStage(),
          id: this.game.getId()
        },
        error: function(jqXHR, textStatus, errorThrown) {
          alert("Failure when trying to request for next");
          return _this.error(errorThrown);
        },
        success: function(data, textStatus, jqXHR) {
          next = data;
          return console.log("to next: " + next);
        }
      });
      return next;
    };

    Connector.prototype.error = function(code) {
      return console.log("Ajax error. Error code: " + code);
    };

    return Connector;

  })();

  ROUND = 0;

  STAGE = 0;

  MAX_ROUNDS = 5;

  MAX_STAGES = 8;

  NEXT_ROUND = 0;

  NEXT_STAGE = 0;

  WIND = 0;

  UPDATE_INTERVAL = 50;

  window.GorillasGame = (function() {
    var PIXELS_PER_METER, forceMultiplier, frameRate, gravityX, gravityY;

    PIXELS_PER_METER = 22;

    gravityX = 0;

    gravityY = 10;

    frameRate = 25;

    forceMultiplier = 7;

    $(document).ready(function() {
      var audioExtension, background, canPlayMp3, canPlayOgg, canvas, debugCanvas, game, myAudio, ph, pw, statsCanvas;
      canvas = document.getElementById('easelCanvas');
      debugCanvas = document.getElementById('debugCanvas');
      statsCanvas = document.getElementById('stats');
      pw = canvas.parentNode.clientWidth;
      ph = canvas.parentNode.clientHeight;
      canvas.height = pw * 0.9 * (canvas.height / canvas.width);
      canvas.width = pw * 0.9;
      canvas.style.top = (ph - canvas.height) / 2 + "px";
      canvas.style.left = (pw - canvas.width) / 2 + "px";
      debugCanvas.height = pw * 0.9 * (debugCanvas.height / debugCanvas.width);
      debugCanvas.width = pw * 0.9;
      debugCanvas.style.top = (ph - debugCanvas.height) / 2 + "px";
      debugCanvas.style.left = (pw - debugCanvas.width) / 2 + "px";
      myAudio = document.createElement("audio");
      background = new Audio();
      audioExtension = ".none";
      if (myAudio.canPlayType) {
        canPlayMp3 = !!myAudio.canPlayType && "" !== myAudio.canPlayType('audio/mpeg');
        canPlayOgg = !!myAudio.canPlayType && "" !== myAudio.canPlayType('audio/ogg; codecs="vorbis"');
      }
      if (canPlayMp3) {
        audioExtension = ".mp3";
      } else if (canPlayOgg) {
        audioExtension = ".ogg";
      }
      background.src = "/sounds/background-music" + audioExtension;
      background.loop = true;
      background.autoplay = true;
      console.log("Round " + ROUND);
      return game = new GorillasGame(canvas, debugCanvas, statsCanvas, -1);
    });

    function GorillasGame(canvas, debugCanvas, statsCanvas, id) {
      var _this = this;
      this.time = 0;
      console.log("Creating new game");
      this.id = id;
      this.connector = new Connector(this);
      this.voffset = canvas.height * 0.85;
      this.world = new EaselBoxWorld(this, frameRate, canvas, debugCanvas, gravityX, gravityY, PIXELS_PER_METER);
      this.world.addWindArrow(WIND);
      this.world.addLandscape({
        width: canvas.width,
        height: canvas.height,
        iterations: 8,
        smoothness: 0.05,
        vertical_offset: this.voffset,
        type: 'static'
      });
      this.arrow = this.world.addArrow();
      this.monkey1 = this.world.addMonkey({
        SpriteSheet: new SpriteSheet({
          images: ["/img/BREATH3/left/breath_left_1.png", "/img/BREATH3/left/breath_left_2.png", "/img/BREATH3/left/breath_left_2_copy.png", "/img/BREATH3/left/breath_left_3.png", "/img/BREATH3/left/breath_left_3_copy.png", "/img/BREATH3/left/breath_left_4.png", "/img/BREATH3/left/breath_left_4_copy.png", "/img/BREATH3/left/breath_left_5.png", "/img/BREATH3/left/approach-left-1.png", "/img/BREATH3/left/approach-left-1_copy.png", "/img/BREATH3/left/approach-left-2.png", "/img/BREATH3/left/approach-left-2_copy.png", "/img/BREATH3/left/approach-left-3.png", "/img/BREATH3/left/approach-left-3_copy.png", "/img/BREATH3/left/approach-left-4.png", "/img/BREATH3/left/approach-left-4_copy.png", "/img/BREATH3/left/approach-left-5.png", "/img/BREATH3/left/approach-left-5_copy.png", "/img/BREATH3/left/approach-left-6.png", "/img/BREATH3/left/shoot_left_1.png", "/img/BREATH3/left/shoot_left_2.png"],
          frames: {
            width: 220,
            height: 165,
            count: 21
          },
          animations: {
            standby: [0, 7, "standby", 2],
            approachbazooka: [7, 18, false, 1],
            shoot: [18, 20, false, 1]
          }
        }),
        scaleX: 1,
        scaleY: 1,
        size_head: 20,
        size_torso: 25,
        size_lowerbody: 32,
        density: 2,
        friction: 0.8,
        restitution: 0.3,
        xPixels: 75,
        yPixels: this.voffset - 75,
        regX: 33,
        regY: 165 - 15,
        voffset: this.voffset
      });
      this.draw();
      this.monkey2 = this.world.addMonkey({
        SpriteSheet: new SpriteSheet({
          images: ["/img/BREATH/right_breath1-resized.png", "/img/BREATH/right_breath2-resized.png", "/img/BREATH/right_breath3-resized.png", "/img/BREATH/right_breath4-resized.png"],
          frames: {
            width: 308,
            height: 308
          },
          animations: {
            standby: [0, 3, "standby", 5]
          }
        }),
        scaleX: 0.5,
        scaleY: 0.5,
        size_head: 15,
        size_torso: 20,
        size_lowerbody: 22,
        density: 2,
        friction: 0.8,
        restitution: 0.3,
        xPixels: canvas.width - 22 - 38,
        yPixels: this.voffset - 20 - 22 * 2,
        regX: 308 / 2,
        regY: 308 / 2 + 20,
        easelx: 100,
        easely: 100
      });
      /*@tower2 = @world.addTower(
      			imgSrc: "/img/TOWER/tower.png"
      			scaleX: 0.4,
      			scaleY: 0.3,    
      			#the position of the easeljs object
      			xPixels: canvas.width-22-38-100,
      			yPixels: @voffset-125
      		)
      */

      this.nextButton = new Bitmap("/img/LANDSCAPE/Next.gif");
      this.nextButton.x = 500;
      this.nextButton.y = 80;
      this.nextButton.scaleX = 0.3;
      this.nextButton.scaleY = 0.3;
      this.nextButton.visible = false;
      this.nextButton.onClick = function(event) {
        ROUND = NEXT_ROUND;
        STAGE = NEXT_STAGE;
        _this.draw();
        _this.updateRound();
        return false;
      };
      this.world.easelStage.addChild(this.nextButton);
      this.updateRound();
    }

    GorillasGame.prototype.draw = function() {
      if (this.nextButton != null) {
        this.nextButton.visible = false;
      }
      this.world.reset();
      this.world.removeEntity(this.world.getBanana());
      if (ROUND <= 0 || ROUND === MAX_ROUNDS) {
        this.world.addBanana({
          imgSrc: "/img/BANANA/banana.png",
          scaleX: 1,
          scaleY: 1,
          density: 1,
          friction: 0,
          restitution: 0,
          width: 40,
          height: 20,
          xPixels: (625 - 110) * 0.3 + 75,
          yPixels: (this.voffset - 5) - (550 - 240) * 0.3,
          regX: 20,
          regY: 20
        });
      }
      this.monkey1.addActionListeners();
      this.world.removeEntity(this.tower1);
      this.tower1 = this.world.addTower({
        imgSrc: "/img/TOWER/tower.png",
        scaleX: 0.4,
        scaleY: 0.3,
        xPixels: 25,
        yPixels: this.voffset - 125
      });
      this.world.addMeanInfo();
      return this.world.box2dWorld.DrawDebugData();
    };

    GorillasGame.prototype.getId = function() {
      return this.id;
    };

    GorillasGame.prototype.setId = function(id) {
      return this.id = id;
    };

    GorillasGame.prototype.getRound = function() {
      return ROUND;
    };

    GorillasGame.prototype.getStage = function() {
      return STAGE;
    };

    GorillasGame.prototype.getWind = function() {
      return WIND;
    };

    GorillasGame.prototype.setWind = function(wind) {
      return WIND = wind;
    };

    GorillasGame.prototype.getPreviousRound = function() {
      if (this.getRound() === 0) {
        return this.getRound();
      } else if (this.getRound() === 1) {
        return MAX_ROUND;
      } else {
        return this.getRound() - 1;
      }
    };

    GorillasGame.prototype.getPreviousStage = function() {
      if (this.getStage() > 0) {
        return this.getStage() - 1;
      } else {
        return this.getStage();
      }
    };

    GorillasGame.prototype.next = function() {
      var next, splitted;
      if (this.nextButton.visible === true) {
        return;
      }
      next = "NO";
      while (next === "NO") {
        next = this.connector.requestNext().trim();
      }
      if (this.world.message != null) {
        this.world.message.visible = false;
      }
      this.nextButton.visible = true;
      splitted = next.split(":");
      NEXT_STAGE = +splitted[0];
      NEXT_ROUND = +splitted[1];
      WIND = +splitted[2];
      this.world.addWindArrow(WIND);
      console.log("wind: " + WIND);
      return next;
    };

    GorillasGame.prototype.updateRound = function() {
      document.getElementById("round").innerText = "Round " + ROUND + " of " + MAX_ROUNDS;
      return document.getElementById("stage").innerText = "Stage " + STAGE + " of " + MAX_STAGES;
    };

    GorillasGame.prototype.getMaxStages = function() {
      return MAX_STAGES;
    };

    GorillasGame.prototype.getMaxRounds = function() {
      return MAX_ROUNDS;
    };

    GorillasGame.prototype.tick = function() {
      var i, _i, _len, _ref;
      _ref = this.world.contactlistener.contacts;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if ((i.fixtureA === this.world.banana.fixture && i.fixtureB === this.monkey2.headbodyfixture) || (i.fixtureA === this.monkey2.headbodyfixture && i.fixtureB === this.world.banana.fixture)) {
          console.log("headshot");
        }
      }
      this.time++;
      if (this.time > UPDATE_INTERVAL) {
        this.time = 0;
        if ((this.world.getRound() === 0 || this.world.getRound() === MAX_ROUNDS) && this.world.getBanana() !== null && (this.world.getBanana().isOver() || this.world.getBanana().getPosition().y > this.voffset) && !this.world.isSubmitted()) {
          this.world.submit();
          return this.next();
        } else if ((this.world.getRound() > 0 && this.world.getRound() < MAX_ROUNDS) && this.world.isSubmitted()) {
          return this.next();
        }
      }
    };

    return GorillasGame;

  })();

}).call(this);
